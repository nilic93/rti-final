{"ast":null,"code":"// Generated by CoffeeScript 2.5.1\n(function () {\n  // This file's name is set up in such a way that it will always show up first in\n  // the list of files given to coffee --join, so that the other files can assume\n  // that XMLHttpRequestEventTarget was already defined.\n  // The DOM EventTarget subclass used by XMLHttpRequest.\n  // @see http://xhr.spec.whatwg.org/#interface-xmlhttprequest\n  var InvalidStateError, NetworkError, ProgressEvent, SecurityError, SyntaxError, XMLHttpRequest, XMLHttpRequestEventTarget, XMLHttpRequestUpload, http, https, os, url;\n\n  XMLHttpRequestEventTarget = function () {\n    class XMLHttpRequestEventTarget {\n      // @private\n      // This is an abstract class and should not be instantiated directly.\n      constructor() {\n        this.onloadstart = null;\n        this.onprogress = null;\n        this.onabort = null;\n        this.onerror = null;\n        this.onload = null;\n        this.ontimeout = null;\n        this.onloadend = null;\n        this._listeners = {};\n      } // Adds a new-style listener for one of the XHR events.\n      // @see http://www.w3.org/TR/XMLHttpRequest/#events\n      // @param {String} eventType an XHR event type, such as 'readystatechange'\n      // @param {function(ProgressEvent)} listener function that will be called when\n      //   the event fires\n      // @return {undefined} undefined\n\n\n      addEventListener(eventType, listener) {\n        var base;\n        eventType = eventType.toLowerCase();\n        (base = this._listeners)[eventType] || (base[eventType] = []);\n\n        this._listeners[eventType].push(listener);\n\n        return void 0;\n      } // Removes an event listener added by calling addEventListener.\n      // @param {String} eventType an XHR event type, such as 'readystatechange'\n      // @param {function(ProgressEvent)} listener the value passed in a previous\n      //   call to addEventListener.\n      // @return {undefined} undefined\n\n\n      removeEventListener(eventType, listener) {\n        var index;\n        eventType = eventType.toLowerCase();\n\n        if (this._listeners[eventType]) {\n          index = this._listeners[eventType].indexOf(listener);\n\n          if (index !== -1) {\n            this._listeners[eventType].splice(index, 1);\n          }\n        }\n\n        return void 0;\n      } // Calls all the listeners for an event.\n      // @param {ProgressEvent} event the event to be dispatched\n      // @return {undefined} undefined\n\n\n      dispatchEvent(event) {\n        var eventType, j, len, listener, listeners;\n        event.currentTarget = event.target = this;\n        eventType = event.type;\n\n        if (listeners = this._listeners[eventType]) {\n          for (j = 0, len = listeners.length; j < len; j++) {\n            listener = listeners[j];\n            listener.call(this, event);\n          }\n        }\n\n        if (listener = this[`on${eventType}`]) {\n          listener.call(this, event);\n        }\n\n        return void 0;\n      }\n\n    }\n\n    ; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'loadstart' event\n\n    XMLHttpRequestEventTarget.prototype.onloadstart = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'progress' event\n\n    XMLHttpRequestEventTarget.prototype.onprogress = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'abort' event\n\n    XMLHttpRequestEventTarget.prototype.onabort = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'error' event\n\n    XMLHttpRequestEventTarget.prototype.onerror = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'load' event\n\n    XMLHttpRequestEventTarget.prototype.onload = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'timeout' event\n\n    XMLHttpRequestEventTarget.prototype.ontimeout = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'loadend' event\n\n    XMLHttpRequestEventTarget.prototype.onloadend = null;\n    return XMLHttpRequestEventTarget;\n  }.call(this); // This file's name is set up in such a way that it will always show up second\n  // in the list of files given to coffee --join, so it can use the\n  // XMLHttpRequestEventTarget definition and so that the other files can assume\n  // that XMLHttpRequest was already defined.\n\n\n  http = require('http');\n  https = require('https');\n  os = require('os');\n  url = require('url');\n\n  XMLHttpRequest = function () {\n    // The ECMAScript HTTP API.\n    // @see http://www.w3.org/TR/XMLHttpRequest/#introduction\n    class XMLHttpRequest extends XMLHttpRequestEventTarget {\n      // Creates a new request.\n      // @param {Object} options one or more of the options below\n      // @option options {Boolean} anon if true, the request's anonymous flag\n      //   will be set\n      // @see http://www.w3.org/TR/XMLHttpRequest/#constructors\n      // @see http://www.w3.org/TR/XMLHttpRequest/#anonymous-flag\n      constructor(options) {\n        super();\n        this.onreadystatechange = null;\n        this._anonymous = options && options.anon;\n        this.readyState = XMLHttpRequest.UNSENT;\n        this.response = null;\n        this.responseText = '';\n        this.responseType = '';\n        this.responseURL = '';\n        this.status = 0;\n        this.statusText = '';\n        this.timeout = 0;\n        this.upload = new XMLHttpRequestUpload(this);\n        this._method = null; // String\n\n        this._url = null; // Return value of url.parse()\n\n        this._sync = false;\n        this._headers = null; // Object<String, String>\n\n        this._loweredHeaders = null; // Object<lowercase String, String>\n\n        this._mimeOverride = null;\n        this._request = null; // http.ClientRequest\n\n        this._response = null; // http.ClientResponse\n\n        this._responseParts = null; // Array<Buffer, String>\n\n        this._responseHeaders = null; // Object<lowercase String, String>\n\n        this._aborting = null;\n        this._error = null;\n        this._loadedBytes = 0;\n        this._totalBytes = 0;\n        this._lengthComputable = false;\n      } // Sets the XHR's method, URL, synchronous flag, and authentication params.\n      // @param {String} method the HTTP method to be used\n      // @param {String} url the URL that the request will be made to\n      // @param {?Boolean} async if false, the XHR should be processed\n      //   synchronously; true by default\n      // @param {?String} user the user credential to be used in HTTP basic\n      //   authentication\n      // @param {?String} password the password credential to be used in HTTP basic\n      //   authentication\n      // @return {undefined} undefined\n      // @throw {SecurityError} method is not one of the allowed methods\n      // @throw {SyntaxError} urlString is not a valid URL\n      // @throw {Error} the URL contains an unsupported protocol; the supported\n      //   protocols are file, http and https\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-open()-method\n\n\n      open(method, url, async, user, password) {\n        var xhrUrl;\n        method = method.toUpperCase();\n\n        if (method in this._restrictedMethods) {\n          throw new SecurityError(`HTTP method ${method} is not allowed in XHR`);\n        }\n\n        xhrUrl = this._parseUrl(url);\n\n        if (async === void 0) {\n          async = true;\n        }\n\n        switch (this.readyState) {\n          case XMLHttpRequest.UNSENT:\n          case XMLHttpRequest.OPENED:\n          case XMLHttpRequest.DONE:\n            // Nothing to do here.\n            null;\n            break;\n\n          case XMLHttpRequest.HEADERS_RECEIVED:\n          case XMLHttpRequest.LOADING:\n            // TODO(pwnall): terminate abort(), terminate send()\n            null;\n        }\n\n        this._method = method;\n        this._url = xhrUrl;\n        this._sync = !async;\n        this._headers = {};\n        this._loweredHeaders = {};\n        this._mimeOverride = null;\n\n        this._setReadyState(XMLHttpRequest.OPENED);\n\n        this._request = null;\n        this._response = null;\n        this.status = 0;\n        this.statusText = '';\n        this._responseParts = [];\n        this._responseHeaders = null;\n        this._loadedBytes = 0;\n        this._totalBytes = 0;\n        this._lengthComputable = false;\n        return void 0;\n      } // Appends a header to the list of author request headers.\n      // @param {String} name the HTTP header name\n      // @param {String} value the HTTP header value\n      // @return {undefined} undefined\n      // @throw {InvalidStateError} readyState is not OPENED\n      // @throw {SyntaxError} name is not a valid HTTP header name or value is not\n      //   a valid HTTP header value\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method\n\n\n      setRequestHeader(name, value) {\n        var loweredName;\n\n        if (this.readyState !== XMLHttpRequest.OPENED) {\n          throw new InvalidStateError(\"XHR readyState must be OPENED\");\n        }\n\n        loweredName = name.toLowerCase();\n\n        if (this._restrictedHeaders[loweredName] || /^sec\\-/.test(loweredName) || /^proxy-/.test(loweredName)) {\n          console.warn(`Refused to set unsafe header \\\"${name}\\\"`);\n          return void 0;\n        }\n\n        value = value.toString();\n\n        if (loweredName in this._loweredHeaders) {\n          // Combine value with the existing header value.\n          name = this._loweredHeaders[loweredName];\n          this._headers[name] = this._headers[name] + ', ' + value;\n        } else {\n          // New header.\n          this._loweredHeaders[loweredName] = name;\n          this._headers[name] = value;\n        }\n\n        return void 0;\n      } // Initiates the request.\n      // @param {?String, ?ArrayBufferView} data the data to be sent; ignored for\n      //   GET and HEAD requests\n      // @return {undefined} undefined\n      // @throw {InvalidStateError} readyState is not OPENED\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\n\n\n      send(data) {\n        if (this.readyState !== XMLHttpRequest.OPENED) {\n          throw new InvalidStateError(\"XHR readyState must be OPENED\");\n        }\n\n        if (this._request) {\n          throw new InvalidStateError(\"send() already called\");\n        }\n\n        switch (this._url.protocol) {\n          case 'file:':\n            this._sendFile(data);\n\n            break;\n\n          case 'http:':\n          case 'https:':\n            this._sendHttp(data);\n\n            break;\n\n          default:\n            throw new NetworkError(`Unsupported protocol ${this._url.protocol}`);\n        }\n\n        return void 0;\n      } // Cancels the network activity performed by this request.\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-abort()-method\n\n\n      abort() {\n        if (!this._request) {\n          return;\n        }\n\n        this._request.abort();\n\n        this._setError();\n\n        this._dispatchProgress('abort');\n\n        this._dispatchProgress('loadend');\n\n        return void 0;\n      } // Returns a header value in the HTTP response for this XHR.\n      // @param {String} name case-insensitive HTTP header name\n      // @return {?String} value the value of the header whose name matches the\n      //   given name, or null if there is no such header\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n\n\n      getResponseHeader(name) {\n        var loweredName;\n\n        if (!this._responseHeaders) {\n          return null;\n        }\n\n        loweredName = name.toLowerCase();\n\n        if (loweredName in this._responseHeaders) {\n          return this._responseHeaders[loweredName];\n        } else {\n          return null;\n        }\n      } // Returns all the HTTP headers in this XHR's response.\n      // @return {String} header lines separated by CR LF, where each header line\n      //   has the name and value separated by a \": \" (colon, space); the empty\n      //   string is returned if the headers are not available\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n\n\n      getAllResponseHeaders() {\n        var lines, name, value;\n\n        if (!this._responseHeaders) {\n          return '';\n        }\n\n        lines = function () {\n          var ref, results;\n          ref = this._responseHeaders;\n          results = [];\n\n          for (name in ref) {\n            value = ref[name];\n            results.push(`${name}: ${value}`);\n          }\n\n          return results;\n        }.call(this);\n\n        return lines.join(\"\\r\\n\");\n      } // Overrides the Content-Type\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-overridemimetype()-method\n\n\n      overrideMimeType(newMimeType) {\n        if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n          throw new InvalidStateError(\"overrideMimeType() not allowed in LOADING or DONE\");\n        }\n\n        this._mimeOverride = newMimeType.toLowerCase();\n        return void 0;\n      } // Network configuration not exposed in the XHR API.\n      // Although the XMLHttpRequest specification calls itself \"ECMAScript HTTP\",\n      // it assumes that requests are always performed in the context of a browser\n      // application, where some network parameters are set by the browser user and\n      // should not be modified by Web applications. This API provides access to\n      // these network parameters.\n      // NOTE: this is not in the XMLHttpRequest API, and will not work in\n      // browsers.  It is a stable node-xhr2 API.\n      // @param {Object} options one or more of the options below\n      // @option options {?http.Agent} httpAgent the value for the nodejsHttpAgent\n      //   property (the agent used for HTTP requests)\n      // @option options {?https.Agent} httpsAgent the value for the\n      //   nodejsHttpsAgent property (the agent used for HTTPS requests)\n      // @return {undefined} undefined\n\n\n      nodejsSet(options) {\n        var baseUrl, parsedUrl;\n\n        if ('httpAgent' in options) {\n          this.nodejsHttpAgent = options.httpAgent;\n        }\n\n        if ('httpsAgent' in options) {\n          this.nodejsHttpsAgent = options.httpsAgent;\n        }\n\n        if ('baseUrl' in options) {\n          baseUrl = options.baseUrl;\n\n          if (baseUrl !== null) {\n            parsedUrl = url.parse(baseUrl, false, true);\n\n            if (!parsedUrl.protocol) {\n              throw new SyntaxError(\"baseUrl must be an absolute URL\");\n            }\n          }\n\n          this.nodejsBaseUrl = baseUrl;\n        }\n\n        return void 0;\n      } // Default settings for the network configuration not exposed in the XHR API.\n      // NOTE: this is not in the XMLHttpRequest API, and will not work in\n      // browsers.  It is a stable node-xhr2 API.\n      // @param {Object} options one or more of the options below\n      // @option options {?http.Agent} httpAgent the default value for the\n      //   nodejsHttpAgent property (the agent used for HTTP requests)\n      // @option options {https.Agent} httpsAgent the default value for the\n      //   nodejsHttpsAgent property (the agent used for HTTPS requests)\n      // @return {undefined} undefined\n      // @see XMLHttpRequest.nodejsSet\n\n\n      static nodejsSet(options) {\n        // \"this\" will be set to XMLHttpRequest.prototype, so the instance nodejsSet\n        // operates on default property values.\n        XMLHttpRequest.prototype.nodejsSet(options);\n        return void 0;\n      } // Sets the readyState property and fires the readystatechange event.\n      // @private\n      // @param {Number} newReadyState the new value of readyState\n      // @return {undefined} undefined\n\n\n      _setReadyState(newReadyState) {\n        var event;\n        this.readyState = newReadyState;\n        event = new ProgressEvent('readystatechange');\n        this.dispatchEvent(event);\n        return void 0;\n      } // XMLHttpRequest#send() implementation for the file: protocol.\n      // @private\n\n\n      _sendFile() {\n        if (this._url.method !== 'GET') {\n          throw new NetworkError('The file protocol only supports GET');\n        }\n\n        throw new Error(\"Protocol file: not implemented\");\n      } // XMLHttpRequest#send() implementation for the http: and https: protocols.\n      // @private\n      // This method sets the instance variables and calls _sendHxxpRequest(), which\n      // is responsible for building a node.js request and firing it off. The code\n      // in _sendHxxpRequest() is separated off so it can be reused when handling\n      // redirects.\n      // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method\n\n\n      _sendHttp(data) {\n        if (this._sync) {\n          throw new Error(\"Synchronous XHR processing not implemented\");\n        }\n\n        if (data != null && (this._method === 'GET' || this._method === 'HEAD')) {\n          console.warn(`Discarding entity body for ${this._method} requests`);\n          data = null;\n        } else {\n          // Send Content-Length: 0\n          data || (data = '');\n        } // NOTE: this is called before finalizeHeaders so that the uploader can\n        //       figure out Content-Length and Content-Type.\n\n\n        this.upload._setData(data);\n\n        this._finalizeHeaders();\n\n        this._sendHxxpRequest();\n\n        return void 0;\n      } // Sets up and fires off a HTTP/HTTPS request using the node.js API.\n      // @private\n      // This method contains the bulk of the XMLHttpRequest#send() implementation,\n      // and is also used to issue new HTTP requests when handling HTTP redirects.\n      // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method\n\n\n      _sendHxxpRequest() {\n        var agent, hxxp, request;\n\n        if (this._url.protocol === 'http:') {\n          hxxp = http;\n          agent = this.nodejsHttpAgent;\n        } else {\n          hxxp = https;\n          agent = this.nodejsHttpsAgent;\n        }\n\n        request = hxxp.request({\n          hostname: this._url.hostname,\n          port: this._url.port,\n          path: this._url.path,\n          auth: this._url.auth,\n          method: this._method,\n          headers: this._headers,\n          agent: agent\n        });\n        this._request = request;\n\n        if (this.timeout) {\n          request.setTimeout(this.timeout, () => {\n            return this._onHttpTimeout(request);\n          });\n        }\n\n        request.on('response', response => {\n          return this._onHttpResponse(request, response);\n        });\n        request.on('error', error => {\n          return this._onHttpRequestError(request, error);\n        });\n\n        this.upload._startUpload(request);\n\n        if (this._request === request) {\n          // An http error might have already fired.\n          this._dispatchProgress('loadstart');\n        }\n\n        return void 0;\n      } // Fills in the restricted HTTP headers with default values.\n      // This is called right before the HTTP request is sent off.\n      // @private\n      // @return {undefined} undefined\n\n\n      _finalizeHeaders() {\n        var base;\n        this._headers['Connection'] = 'keep-alive';\n        this._headers['Host'] = this._url.host;\n\n        if (this._anonymous) {\n          this._headers['Referer'] = 'about:blank';\n        }\n\n        (base = this._headers)['User-Agent'] || (base['User-Agent'] = this._userAgent);\n\n        this.upload._finalizeHeaders(this._headers, this._loweredHeaders);\n\n        return void 0;\n      } // Called when the headers of an HTTP response have been received.\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   produced this response\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   passed to\n\n\n      _onHttpResponse(request, response) {\n        var lengthString;\n\n        if (this._request !== request) {\n          return;\n        } // Transparent redirection handling.\n\n\n        switch (response.statusCode) {\n          case 301:\n          case 302:\n          case 303:\n          case 307:\n          case 308:\n            this._url = this._parseUrl(response.headers['location']);\n            this._method = 'GET';\n\n            if ('content-type' in this._loweredHeaders) {\n              delete this._headers[this._loweredHeaders['content-type']];\n              delete this._loweredHeaders['content-type'];\n            } // XMLHttpRequestUpload#_finalizeHeaders() sets Content-Type directly.\n\n\n            if ('Content-Type' in this._headers) {\n              delete this._headers['Content-Type'];\n            } // Restricted headers can't be set by the user, no need to check\n            // loweredHeaders.\n\n\n            delete this._headers['Content-Length'];\n\n            this.upload._reset();\n\n            this._finalizeHeaders();\n\n            this._sendHxxpRequest();\n\n            return;\n        }\n\n        this._response = response;\n\n        this._response.on('data', data => {\n          return this._onHttpResponseData(response, data);\n        });\n\n        this._response.on('end', () => {\n          return this._onHttpResponseEnd(response);\n        });\n\n        this._response.on('close', () => {\n          return this._onHttpResponseClose(response);\n        });\n\n        this.responseURL = this._url.href.split('#')[0];\n        this.status = this._response.statusCode;\n        this.statusText = http.STATUS_CODES[this.status];\n\n        this._parseResponseHeaders(response);\n\n        if (lengthString = this._responseHeaders['content-length']) {\n          this._totalBytes = parseInt(lengthString);\n          this._lengthComputable = true;\n        } else {\n          this._lengthComputable = false;\n        }\n\n        return this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);\n      } // Called when some data has been received on a HTTP connection.\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n      // @param {String, Buffer} data the data that has been received\n\n\n      _onHttpResponseData(response, data) {\n        if (this._response !== response) {\n          return;\n        }\n\n        this._responseParts.push(data);\n\n        this._loadedBytes += data.length;\n\n        if (this.readyState !== XMLHttpRequest.LOADING) {\n          this._setReadyState(XMLHttpRequest.LOADING);\n        }\n\n        return this._dispatchProgress('progress');\n      } // Called when the HTTP request finished processing.\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n\n\n      _onHttpResponseEnd(response) {\n        if (this._response !== response) {\n          return;\n        }\n\n        this._parseResponse();\n\n        this._request = null;\n        this._response = null;\n\n        this._setReadyState(XMLHttpRequest.DONE);\n\n        this._dispatchProgress('load');\n\n        return this._dispatchProgress('loadend');\n      } // Called when the underlying HTTP connection was closed prematurely.\n      // If this method is called, it will be called after or instead of\n      // onHttpResponseEnd.\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n\n\n      _onHttpResponseClose(response) {\n        var request;\n\n        if (this._response !== response) {\n          return;\n        }\n\n        request = this._request;\n\n        this._setError();\n\n        request.abort();\n\n        this._setReadyState(XMLHttpRequest.DONE);\n\n        this._dispatchProgress('error');\n\n        return this._dispatchProgress('loadend');\n      } // Called when the timeout set on the HTTP socket expires.\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   fired this event\n\n\n      _onHttpTimeout(request) {\n        if (this._request !== request) {\n          return;\n        }\n\n        this._setError();\n\n        request.abort();\n\n        this._setReadyState(XMLHttpRequest.DONE);\n\n        this._dispatchProgress('timeout');\n\n        return this._dispatchProgress('loadend');\n      } // Called when something wrong happens on the HTTP socket\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   fired this event\n      // @param {Error} error emitted exception\n\n\n      _onHttpRequestError(request, error) {\n        if (this._request !== request) {\n          return;\n        }\n\n        this._setError();\n\n        request.abort();\n\n        this._setReadyState(XMLHttpRequest.DONE);\n\n        this._dispatchProgress('error');\n\n        return this._dispatchProgress('loadend');\n      } // Fires an XHR progress event.\n      // @private\n      // @param {String} eventType one of the XHR progress event types, such as\n      //   'load' and 'progress'\n\n\n      _dispatchProgress(eventType) {\n        var event;\n        event = new ProgressEvent(eventType);\n        event.lengthComputable = this._lengthComputable;\n        event.loaded = this._loadedBytes;\n        event.total = this._totalBytes;\n        this.dispatchEvent(event);\n        return void 0;\n      } // Sets up the XHR to reflect the fact that an error has occurred.\n      // The possible errors are a network error, a timeout, or an abort.\n      // @private\n\n\n      _setError() {\n        this._request = null;\n        this._response = null;\n        this._responseHeaders = null;\n        this._responseParts = null;\n        return void 0;\n      } // Parses a request URL string.\n      // @private\n      // This method is a thin wrapper around url.parse() that normalizes HTTP\n      // user/password credentials. It is used to parse the URL string passed to\n      // XMLHttpRequest#open() and the URLs in the Location headers of HTTP redirect\n      // responses.\n      // @param {String} urlString the URL to be parsed\n      // @return {Object} parsed URL\n\n\n      _parseUrl(urlString) {\n        var absoluteUrlString, index, password, user, xhrUrl;\n\n        if (this.nodejsBaseUrl === null) {\n          absoluteUrlString = urlString;\n        } else {\n          absoluteUrlString = url.resolve(this.nodejsBaseUrl, urlString);\n        }\n\n        xhrUrl = url.parse(absoluteUrlString, false, true);\n        xhrUrl.hash = null;\n\n        if (xhrUrl.auth && (typeof user !== \"undefined\" && user !== null || typeof password !== \"undefined\" && password !== null)) {\n          index = xhrUrl.auth.indexOf(':');\n\n          if (index === -1) {\n            if (!user) {\n              user = xhrUrl.auth;\n            }\n          } else {\n            if (!user) {\n              user = xhrUrl.substring(0, index);\n            }\n\n            if (!password) {\n              password = xhrUrl.substring(index + 1);\n            }\n          }\n        }\n\n        if (user || password) {\n          xhrUrl.auth = `${user}:${password}`;\n        }\n\n        return xhrUrl;\n      } // Reads the headers from a node.js ClientResponse instance.\n      // @private\n      // @param {http.ClientResponse} response the response whose headers will be\n      //   imported into this XMLHttpRequest's state\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n\n\n      _parseResponseHeaders(response) {\n        var loweredName, name, ref, value;\n        this._responseHeaders = {};\n        ref = response.headers;\n\n        for (name in ref) {\n          value = ref[name];\n          loweredName = name.toLowerCase();\n\n          if (this._privateHeaders[loweredName]) {\n            continue;\n          }\n\n          if (this._mimeOverride !== null && loweredName === 'content-type') {\n            value = this._mimeOverride;\n          }\n\n          this._responseHeaders[loweredName] = value;\n        }\n\n        if (this._mimeOverride !== null && !('content-type' in this._responseHeaders)) {\n          this._responseHeaders['content-type'] = this._mimeOverride;\n        }\n\n        return void 0;\n      } // Sets the response and responseText properties when an XHR completes.\n      // @private\n      // @return {undefined} undefined\n\n\n      _parseResponse() {\n        var arrayBuffer, buffer, i, j, jsonError, ref, view;\n\n        if (Buffer.concat) {\n          buffer = Buffer.concat(this._responseParts);\n        } else {\n          // node 0.6\n          buffer = this._concatBuffers(this._responseParts);\n        }\n\n        this._responseParts = null;\n\n        switch (this.responseType) {\n          case 'text':\n            this._parseTextResponse(buffer);\n\n            break;\n\n          case 'json':\n            this.responseText = null;\n\n            try {\n              this.response = JSON.parse(buffer.toString('utf-8'));\n            } catch (error1) {\n              jsonError = error1;\n              this.response = null;\n            }\n\n            break;\n\n          case 'buffer':\n            this.responseText = null;\n            this.response = buffer;\n            break;\n\n          case 'arraybuffer':\n            this.responseText = null;\n            arrayBuffer = new ArrayBuffer(buffer.length);\n            view = new Uint8Array(arrayBuffer);\n\n            for (i = j = 0, ref = buffer.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n              view[i] = buffer[i];\n            }\n\n            this.response = arrayBuffer;\n            break;\n\n          default:\n            // TODO(pwnall): content-base detection\n            this._parseTextResponse(buffer);\n\n        }\n\n        return void 0;\n      } // Sets response and responseText for a 'text' response type.\n      // @private\n      // @param {Buffer} buffer the node.js Buffer containing the binary response\n      // @return {undefined} undefined\n\n\n      _parseTextResponse(buffer) {\n        var e;\n\n        try {\n          this.responseText = buffer.toString(this._parseResponseEncoding());\n        } catch (error1) {\n          e = error1; // Unknown encoding.\n\n          this.responseText = buffer.toString('binary');\n        }\n\n        this.response = this.responseText;\n        return void 0;\n      } // Figures out the string encoding of the XHR's response.\n      // This is called to determine the encoding when responseText is set.\n      // @private\n      // @return {String} a string encoding, e.g. 'utf-8'\n\n\n      _parseResponseEncoding() {\n        var contentType, encoding, match;\n        encoding = null;\n\n        if (contentType = this._responseHeaders['content-type']) {\n          if (match = /\\;\\s*charset\\=(.*)$/.exec(contentType)) {\n            return match[1];\n          }\n        }\n\n        return 'utf-8';\n      } // Buffer.concat implementation for node 0.6.\n      // @private\n      // @param {Array<Buffer>} buffers the buffers whose contents will be merged\n      // @return {Buffer} same as Buffer.concat(buffers) in node 0.8 and above\n\n\n      _concatBuffers(buffers) {\n        var buffer, j, k, len, len1, length, target;\n\n        if (buffers.length === 0) {\n          return Buffer.alloc(0);\n        }\n\n        if (buffers.length === 1) {\n          return buffers[0];\n        }\n\n        length = 0;\n\n        for (j = 0, len = buffers.length; j < len; j++) {\n          buffer = buffers[j];\n          length += buffer.length;\n        }\n\n        target = Buffer.alloc(length);\n        length = 0;\n\n        for (k = 0, len1 = buffers.length; k < len1; k++) {\n          buffer = buffers[k];\n          buffer.copy(target, length);\n          length += buffer.length;\n        }\n\n        return target;\n      }\n\n    }\n\n    ; // @property {function(ProgressEvent)} DOM level 0-style handler for the\n    //   'readystatechange' event\n\n    XMLHttpRequest.prototype.onreadystatechange = null; // @property {Number} the current state of the XHR object\n    // @see http://www.w3.org/TR/XMLHttpRequest/#states\n\n    XMLHttpRequest.prototype.readyState = null; // @property {String, ArrayBuffer, Buffer, Object} processed XHR response\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute\n\n    XMLHttpRequest.prototype.response = null; // @property {String} response string, if responseType is '' or 'text'\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute\n\n    XMLHttpRequest.prototype.responseText = null; // @property {String} sets the parsing method for the XHR response\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute\n\n    XMLHttpRequest.prototype.responseType = null; // @property {Number} the HTTP\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-status-attribute\n\n    XMLHttpRequest.prototype.status = null; // @property {Number} milliseconds to wait for the request to complete\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\n\n    XMLHttpRequest.prototype.timeout = null; // @property {XMLHttpRequestUpload} the associated upload information\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-upload-attribute\n\n    XMLHttpRequest.prototype.upload = null; // readyState value before XMLHttpRequest#open() is called\n\n    XMLHttpRequest.prototype.UNSENT = 0; // readyState value before XMLHttpRequest#open() is called\n\n    XMLHttpRequest.UNSENT = 0; // readyState value after XMLHttpRequest#open() is called, and before\n    //   XMLHttpRequest#send() is called; XMLHttpRequest#setRequestHeader() can be\n    //   called in this state\n\n    XMLHttpRequest.prototype.OPENED = 1; // readyState value after XMLHttpRequest#open() is called, and before\n    //   XMLHttpRequest#send() is called; XMLHttpRequest#setRequestHeader() can be\n    //   called in this state\n\n    XMLHttpRequest.OPENED = 1; // readyState value after redirects have been followed and the HTTP headers of\n    //   the final response have been received\n\n    XMLHttpRequest.prototype.HEADERS_RECEIVED = 2; // readyState value after redirects have been followed and the HTTP headers of\n    //   the final response have been received\n\n    XMLHttpRequest.HEADERS_RECEIVED = 2; // readyState value when the response entity body is being received\n\n    XMLHttpRequest.prototype.LOADING = 3; // readyState value when the response entity body is being received\n\n    XMLHttpRequest.LOADING = 3; // readyState value after the request has been completely processed\n\n    XMLHttpRequest.prototype.DONE = 4; // readyState value after the request has been completely processed\n\n    XMLHttpRequest.DONE = 4; // @property {http.Agent} the agent option passed to HTTP requests\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // It is a stable node-xhr2 API that is useful for testing & going through\n    // web-proxies.\n\n    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent; // @property {https.Agent} the agent option passed to HTTPS requests\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // It is a stable node-xhr2 API that is useful for testing & going through\n    // web-proxies.\n\n    XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent; // @property {String} the base URL that relative URLs get resolved to\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // Its browser equivalent is the base URL of the document associated with the\n    // Window object. It is a stable node-xhr2 API provided for libraries such as\n    // Angular Universal.\n\n    XMLHttpRequest.prototype.nodejsBaseUrl = null; // HTTP methods that are disallowed in the XHR spec.\n    // @private\n    // @see Step 6 in http://www.w3.org/TR/XMLHttpRequest/#the-open()-method\n\n    XMLHttpRequest.prototype._restrictedMethods = {\n      CONNECT: true,\n      TRACE: true,\n      TRACK: true\n    }; // HTTP request headers that are disallowed in the XHR spec.\n    // @private\n    // @see Step 5 in\n    //   http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method\n\n    XMLHttpRequest.prototype._restrictedHeaders = {\n      'accept-charset': true,\n      'accept-encoding': true,\n      'access-control-request-headers': true,\n      'access-control-request-method': true,\n      connection: true,\n      'content-length': true,\n      cookie: true,\n      cookie2: true,\n      date: true,\n      dnt: true,\n      expect: true,\n      host: true,\n      'keep-alive': true,\n      origin: true,\n      referer: true,\n      te: true,\n      trailer: true,\n      'transfer-encoding': true,\n      upgrade: true,\n      via: true\n    }; // HTTP response headers that should not be exposed according to the XHR spec.\n    // @private\n    // @see Step 3 in\n    //     http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n\n    XMLHttpRequest.prototype._privateHeaders = {\n      'set-cookie': true,\n      'set-cookie2': true\n    }; // The default value of the User-Agent header.\n\n    XMLHttpRequest.prototype._userAgent = `Mozilla/5.0 (${os.type()} ${os.arch()}) ` + `node.js/${process.versions.node} v8/${process.versions.v8}`;\n    return XMLHttpRequest;\n  }.call(this); // XMLHttpRequest is the result of require('node-xhr2').\n\n\n  module.exports = XMLHttpRequest; // Make node-xhr2 work as a drop-in replacement for libraries that promote the\n  // following usage pattern:\n  //     var XMLHttpRequest = require('xhr-library-name').XMLHttpRequest\n\n  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest; // This file defines the custom errors used in the XMLHttpRequest specification.\n  // Thrown if the XHR security policy is violated.\n\n  SecurityError = class SecurityError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  }; // Thrown if the XHR security policy is violated.\n\n  XMLHttpRequest.SecurityError = SecurityError; // Usually thrown if the XHR is in the wrong readyState for an operation.\n\n  InvalidStateError = class InvalidStateError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  }; // Usually thrown if the XHR is in the wrong readyState for an operation.\n\n  InvalidStateError = class InvalidStateError extends Error {};\n  XMLHttpRequest.InvalidStateError = InvalidStateError; // Thrown if there is a problem with the URL passed to the XHR.\n\n  NetworkError = class NetworkError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  }; // Thrown if parsing URLs errors out.\n\n  XMLHttpRequest.SyntaxError = SyntaxError;\n  SyntaxError = class SyntaxError extends Error {\n    // @private:\n    constructor() {\n      super();\n    }\n\n  };\n\n  ProgressEvent = function () {\n    // http://xhr.spec.whatwg.org/#interface-progressevent\n    class ProgressEvent {\n      // Creates a new event.\n      // @param {String} type the event type, e.g. 'readystatechange'; must be\n      //   lowercased\n      constructor(type) {\n        this.type = type;\n        this.target = null;\n        this.currentTarget = null;\n        this.lengthComputable = false;\n        this.loaded = 0;\n        this.total = 0;\n      }\n\n    }\n\n    ; // Getting the time from the OS is expensive, skip on that for now.\n    // @timeStamp = Date.now()\n    // @property {Boolean} for compatibility with DOM events\n\n    ProgressEvent.prototype.bubbles = false; // @property {Boolean} for fompatibility with DOM events\n\n    ProgressEvent.prototype.cancelable = false; // @property {XMLHttpRequest} the request that caused this event\n\n    ProgressEvent.prototype.target = null; // @property {Number} number of bytes that have already been downloaded or\n    //   uploaded\n\n    ProgressEvent.prototype.loaded = null; // @property {Boolean} true if the Content-Length response header is available\n    //   and the value of the event's total property is meaningful\n\n    ProgressEvent.prototype.lengthComputable = null; // @property {Number} number of bytes that will be downloaded or uploaded by\n    //   the request that fired the event\n\n    ProgressEvent.prototype.total = null;\n    return ProgressEvent;\n  }.call(this); // The XHR spec exports the ProgressEvent constructor.\n\n\n  XMLHttpRequest.ProgressEvent = ProgressEvent; // @see http://xhr.spec.whatwg.org/#interface-xmlhttprequest\n\n  XMLHttpRequestUpload = class XMLHttpRequestUpload extends XMLHttpRequestEventTarget {\n    // @private\n    // @param {XMLHttpRequest} the XMLHttpRequest that this upload object is\n    //   associated with\n    constructor(request) {\n      super();\n      this._request = request;\n\n      this._reset();\n    } // Sets up this Upload to handle a new request.\n    // @private\n    // @return {undefined} undefined\n\n\n    _reset() {\n      this._contentType = null;\n      this._body = null;\n      return void 0;\n    } // Implements the upload-related part of the send() XHR specification.\n    // @private\n    // @param {?String, ?Buffer, ?ArrayBufferView} data the argument passed to\n    //   XMLHttpRequest#send()\n    // @return {undefined} undefined\n    // @see step 4 of http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\n\n\n    _setData(data) {\n      var body, i, j, k, offset, ref, ref1, view;\n\n      if (typeof data === 'undefined' || data === null) {\n        return;\n      }\n\n      if (typeof data === 'string') {\n        // DOMString\n        if (data.length !== 0) {\n          this._contentType = 'text/plain;charset=UTF-8';\n        }\n\n        this._body = Buffer.from(data, 'utf8');\n      } else if (Buffer.isBuffer(data)) {\n        // node.js Buffer\n        this._body = data;\n      } else if (data instanceof ArrayBuffer) {\n        // ArrayBuffer arguments were supported in an old revision of the spec.\n        body = Buffer.alloc(data.byteLength);\n        view = new Uint8Array(data);\n\n        for (i = j = 0, ref = data.byteLength; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n          body[i] = view[i];\n        }\n\n        this._body = body;\n      } else if (data.buffer && data.buffer instanceof ArrayBuffer) {\n        // ArrayBufferView\n        body = Buffer.alloc(data.byteLength);\n        offset = data.byteOffset;\n        view = new Uint8Array(data.buffer);\n\n        for (i = k = 0, ref1 = data.byteLength; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {\n          body[i] = view[i + offset];\n        }\n\n        this._body = body;\n      } else {\n        // NOTE: diverging from the XHR specification of coercing everything else\n        //       to Strings via toString() because that behavior masks bugs and is\n        //       rarely useful\n        throw new Error(`Unsupported send() data ${data}`);\n      }\n\n      return void 0;\n    } // Updates the HTTP headers right before the request is sent.\n    // This is used to set data-dependent headers such as Content-Length and\n    // Content-Type.\n    // @private\n    // @param {Object<String, String>} headers the HTTP headers to be sent\n    // @param {Object<String, String>} loweredHeaders maps lowercased HTTP header\n    //   names (e.g., 'content-type') to the actual names used in the headers\n    //   parameter (e.g., 'Content-Type')\n    // @return {undefined} undefined\n\n\n    _finalizeHeaders(headers, loweredHeaders) {\n      if (this._contentType) {\n        if (!('content-type' in loweredHeaders)) {\n          headers['Content-Type'] = this._contentType;\n        }\n      }\n\n      if (this._body) {\n        // Restricted headers can't be set by the user, no need to check\n        // loweredHeaders.\n        headers['Content-Length'] = this._body.length.toString();\n      }\n\n      return void 0;\n    } // Starts sending the HTTP request data.\n    // @private\n    // @param {http.ClientRequest} request the HTTP request\n    // @return {undefined} undefined\n\n\n    _startUpload(request) {\n      if (this._body) {\n        request.write(this._body);\n      }\n\n      request.end();\n      return void 0;\n    }\n\n  }; // Export the XMLHttpRequestUpload constructor.\n\n  XMLHttpRequest.XMLHttpRequestUpload = XMLHttpRequestUpload;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}