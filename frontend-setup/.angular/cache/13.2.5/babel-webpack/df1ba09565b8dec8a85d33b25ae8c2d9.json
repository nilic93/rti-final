{"ast":null,"code":"/**\n * @license Angular v13.2.6\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { ɵsetRootDomAdapter, DOCUMENT, XhrFactory, PlatformLocation, ɵgetDOM, ɵPLATFORM_SERVER_ID, ViewportScroller, ɵNullViewportScroller } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Injector, Optional, ViewEncapsulation, RendererStyleFlags2, PLATFORM_ID, PLATFORM_INITIALIZER, ɵALLOW_MULTIPLE_PLATFORMS, RendererFactory2, NgZone, Testability, NgModule, ɵsetDocument, createPlatformFactory, platformCore, APP_ID, ApplicationRef, ɵisPromise, Version } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\nimport { ɵBrowserDomAdapter, ɵflattenStyles, ɵNAMESPACE_URIS, ɵshimContentAttribute, ɵshimHostAttribute, ɵSharedStylesHost, ɵTRANSITION_ID, EVENT_MANAGER_PLUGINS, BrowserModule, ɵescapeHtml, TransferState } from '@angular/platform-browser';\nimport * as domino from 'domino';\nimport { ɵAnimationEngine } from '@angular/animations/browser';\nimport { ɵHttpInterceptingHandler, HttpHandler, HttpBackend, HttpClientModule } from '@angular/common/http';\nimport { ɵplatformCoreDynamic } from '@angular/platform-browser-dynamic';\nimport { ɵAnimationRendererFactory, NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { Observable, Subject } from 'rxjs';\nimport * as xhr2 from 'xhr2';\nimport * as url from 'url';\nimport { DomElementSchemaRegistry } from '@angular/compiler';\nimport { first } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction setDomTypes() {\n  // Make all Domino types available in the global env.\n  Object.assign(global, domino.impl);\n  global['KeyboardEvent'] = domino.impl.Event;\n}\n/**\n * Parses a document string to a Document object.\n */\n\n\nfunction parseDocument(html, url = '/') {\n  let window = domino.createWindow(html, url);\n  let doc = window.document;\n  return doc;\n}\n/**\n * Serializes a document to string.\n */\n\n\nfunction serializeDocument(doc) {\n  return doc.serialize();\n}\n/**\n * DOM Adapter for the server platform based on https://github.com/fgnass/domino.\n */\n\n\nclass DominoAdapter extends ɵBrowserDomAdapter {\n  constructor() {\n    super(...arguments);\n    this.supportsDOMEvents = false;\n  }\n\n  static makeCurrent() {\n    setDomTypes();\n    ɵsetRootDomAdapter(new DominoAdapter());\n  }\n\n  createHtmlDocument() {\n    return parseDocument('<html><head><title>fakeTitle</title></head><body></body></html>');\n  }\n\n  getDefaultDocument() {\n    if (!DominoAdapter.defaultDoc) {\n      DominoAdapter.defaultDoc = domino.createDocument();\n    }\n\n    return DominoAdapter.defaultDoc;\n  }\n\n  isElementNode(node) {\n    return node ? node.nodeType === DominoAdapter.defaultDoc.ELEMENT_NODE : false;\n  }\n\n  isShadowRoot(node) {\n    return node.shadowRoot == node;\n  }\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n\n\n  getGlobalEventTarget(doc, target) {\n    if (target === 'window') {\n      return doc.defaultView;\n    }\n\n    if (target === 'document') {\n      return doc;\n    }\n\n    if (target === 'body') {\n      return doc.body;\n    }\n\n    return null;\n  }\n\n  getBaseHref(doc) {\n    var _a; // TODO(alxhub): Need relative path logic from BrowserDomAdapter here?\n\n\n    return ((_a = doc.documentElement.querySelector('base')) === null || _a === void 0 ? void 0 : _a.getAttribute('href')) || '';\n  }\n\n  dispatchEvent(el, evt) {\n    el.dispatchEvent(evt); // Dispatch the event to the window also.\n\n    const doc = el.ownerDocument || el;\n    const win = doc.defaultView;\n\n    if (win) {\n      win.dispatchEvent(evt);\n    }\n  }\n\n  getUserAgent() {\n    return 'Fake user agent';\n  }\n\n  getCookie(name) {\n    throw new Error('getCookie has not been implemented');\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Representation of the current platform state.\n *\n * @publicApi\n */\n\n\nclass PlatformState {\n  constructor(_doc) {\n    this._doc = _doc;\n  }\n  /**\n   * Renders the current state of the platform to string.\n   */\n\n\n  renderToString() {\n    return serializeDocument(this._doc);\n  }\n  /**\n   * Returns the current DOM state.\n   */\n\n\n  getDocument() {\n    return this._doc;\n  }\n\n}\n\nPlatformState.ɵfac = function PlatformState_Factory(t) {\n  return new (t || PlatformState)(i0.ɵɵinject(DOCUMENT));\n};\n\nPlatformState.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PlatformState,\n  factory: PlatformState.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PlatformState, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The DI token for setting the initial config for the platform.\n *\n * @publicApi\n */\n\n\nconst INITIAL_CONFIG = new InjectionToken('Server.INITIAL_CONFIG');\n/**\n * A function that will be executed when calling `renderModuleFactory` or `renderModule` just\n * before current platform state is rendered to string.\n *\n * @publicApi\n */\n\nconst BEFORE_APP_SERIALIZED = new InjectionToken('Server.RENDER_MODULE_HOOK');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// @see https://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#URI-syntax\n\nconst isAbsoluteUrl = /^[a-zA-Z\\-\\+.]+:\\/\\//;\n\nclass ServerXhr {\n  build() {\n    return new xhr2.XMLHttpRequest();\n  }\n\n}\n\nServerXhr.ɵfac = function ServerXhr_Factory(t) {\n  return new (t || ServerXhr)();\n};\n\nServerXhr.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ServerXhr,\n  factory: ServerXhr.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServerXhr, [{\n    type: Injectable\n  }], null, null);\n})();\n\nclass ZoneMacroTaskWrapper {\n  wrap(request) {\n    return new Observable(observer => {\n      let task = null;\n      let scheduled = false;\n      let sub = null;\n      let savedResult = null;\n      let savedError = null;\n\n      const scheduleTask = _task => {\n        task = _task;\n        scheduled = true;\n        const delegate = this.delegate(request);\n        sub = delegate.subscribe(res => savedResult = res, err => {\n          if (!scheduled) {\n            throw new Error('An http observable was completed twice. This shouldn\\'t happen, please file a bug.');\n          }\n\n          savedError = err;\n          scheduled = false;\n          task.invoke();\n        }, () => {\n          if (!scheduled) {\n            throw new Error('An http observable was completed twice. This shouldn\\'t happen, please file a bug.');\n          }\n\n          scheduled = false;\n          task.invoke();\n        });\n      };\n\n      const cancelTask = _task => {\n        if (!scheduled) {\n          return;\n        }\n\n        scheduled = false;\n\n        if (sub) {\n          sub.unsubscribe();\n          sub = null;\n        }\n      };\n\n      const onComplete = () => {\n        if (savedError !== null) {\n          observer.error(savedError);\n        } else {\n          observer.next(savedResult);\n          observer.complete();\n        }\n      }; // MockBackend for Http is synchronous, which means that if scheduleTask is by\n      // scheduleMacroTask, the request will hit MockBackend and the response will be\n      // sent, causing task.invoke() to be called.\n\n\n      const _task = Zone.current.scheduleMacroTask('ZoneMacroTaskWrapper.subscribe', onComplete, {}, () => null, cancelTask);\n\n      scheduleTask(_task);\n      return () => {\n        if (scheduled && task) {\n          task.zone.cancelTask(task);\n          scheduled = false;\n        }\n\n        if (sub) {\n          sub.unsubscribe();\n          sub = null;\n        }\n      };\n    });\n  }\n\n}\n\nclass ZoneClientBackend extends ZoneMacroTaskWrapper {\n  constructor(backend, platformLocation, config) {\n    super();\n    this.backend = backend;\n    this.platformLocation = platformLocation;\n    this.config = config;\n  }\n\n  handle(request) {\n    const {\n      href,\n      protocol,\n      hostname,\n      port\n    } = this.platformLocation;\n\n    if (this.config.useAbsoluteUrl && !isAbsoluteUrl.test(request.url) && isAbsoluteUrl.test(href)) {\n      const baseHref = this.platformLocation.getBaseHrefFromDOM() || href;\n      const urlPrefix = `${protocol}//${hostname}` + (port ? `:${port}` : '');\n      const baseUrl = new URL(baseHref, urlPrefix);\n      const url = new URL(request.url, baseUrl);\n      return this.wrap(request.clone({\n        url: url.toString()\n      }));\n    }\n\n    return this.wrap(request);\n  }\n\n  delegate(request) {\n    return this.backend.handle(request);\n  }\n\n}\n\nfunction zoneWrappedInterceptingHandler(backend, injector, platformLocation, config) {\n  const realBackend = new ɵHttpInterceptingHandler(backend, injector);\n  return new ZoneClientBackend(realBackend, platformLocation, config);\n}\n\nconst SERVER_HTTP_PROVIDERS = [{\n  provide: XhrFactory,\n  useClass: ServerXhr\n}, {\n  provide: HttpHandler,\n  useFactory: zoneWrappedInterceptingHandler,\n  deps: [HttpBackend, Injector, PlatformLocation, INITIAL_CONFIG]\n}];\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction parseUrl(urlStr) {\n  const parsedUrl = url.parse(urlStr);\n  return {\n    hostname: parsedUrl.hostname || '',\n    protocol: parsedUrl.protocol || '',\n    port: parsedUrl.port || '',\n    pathname: parsedUrl.pathname || '',\n    search: parsedUrl.search || '',\n    hash: parsedUrl.hash || ''\n  };\n}\n/**\n * Server-side implementation of URL state. Implements `pathname`, `search`, and `hash`\n * but not the state stack.\n */\n\n\nclass ServerPlatformLocation {\n  constructor(_doc, _config) {\n    this._doc = _doc;\n    this.href = '/';\n    this.hostname = '/';\n    this.protocol = '/';\n    this.port = '/';\n    this.pathname = '/';\n    this.search = '';\n    this.hash = '';\n    this._hashUpdate = new Subject();\n    const config = _config;\n\n    if (!config) {\n      return;\n    }\n\n    if (config.url) {\n      const url = parseUrl(config.url);\n      this.protocol = url.protocol;\n      this.hostname = url.hostname;\n      this.port = url.port;\n      this.pathname = url.pathname;\n      this.search = url.search;\n      this.hash = url.hash;\n      this.href = _doc.location.href;\n    }\n\n    if (config.useAbsoluteUrl) {\n      if (!config.baseUrl) {\n        throw new Error(`\"PlatformConfig.baseUrl\" must be set if \"useAbsoluteUrl\" is true`);\n      }\n\n      const url = parseUrl(config.baseUrl);\n      this.protocol = url.protocol;\n      this.hostname = url.hostname;\n      this.port = url.port;\n    }\n  }\n\n  getBaseHrefFromDOM() {\n    return ɵgetDOM().getBaseHref(this._doc);\n  }\n\n  onPopState(fn) {\n    // No-op: a state stack is not implemented, so\n    // no events will ever come.\n    return () => {};\n  }\n\n  onHashChange(fn) {\n    const subscription = this._hashUpdate.subscribe(fn);\n\n    return () => subscription.unsubscribe();\n  }\n\n  get url() {\n    return `${this.pathname}${this.search}${this.hash}`;\n  }\n\n  setHash(value, oldUrl) {\n    if (this.hash === value) {\n      // Don't fire events if the hash has not changed.\n      return;\n    }\n\n    this.hash = value;\n    const newUrl = this.url;\n    scheduleMicroTask(() => this._hashUpdate.next({\n      type: 'hashchange',\n      state: null,\n      oldUrl,\n      newUrl\n    }));\n  }\n\n  replaceState(state, title, newUrl) {\n    const oldUrl = this.url;\n    const parsedUrl = parseUrl(newUrl);\n    this.pathname = parsedUrl.pathname;\n    this.search = parsedUrl.search;\n    this.setHash(parsedUrl.hash, oldUrl);\n  }\n\n  pushState(state, title, newUrl) {\n    this.replaceState(state, title, newUrl);\n  }\n\n  forward() {\n    throw new Error('Not implemented');\n  }\n\n  back() {\n    throw new Error('Not implemented');\n  } // History API isn't available on server, therefore return undefined\n\n\n  getState() {\n    return undefined;\n  }\n\n}\n\nServerPlatformLocation.ɵfac = function ServerPlatformLocation_Factory(t) {\n  return new (t || ServerPlatformLocation)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(INITIAL_CONFIG, 8));\n};\n\nServerPlatformLocation.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ServerPlatformLocation,\n  factory: ServerPlatformLocation.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServerPlatformLocation, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [INITIAL_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nfunction scheduleMicroTask(fn) {\n  Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass ServerEventManagerPlugin\n/* extends EventManagerPlugin which is private */\n{\n  constructor(doc) {\n    this.doc = doc;\n  } // Handle all events on the server.\n\n\n  supports(eventName) {\n    return true;\n  }\n\n  addEventListener(element, eventName, handler) {\n    return ɵgetDOM().onAndCancel(element, eventName, handler);\n  }\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n\n\n  addGlobalEventListener(element, eventName, handler) {\n    const target = ɵgetDOM().getGlobalEventTarget(this.doc, element);\n\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n\n    return this.addEventListener(target, eventName, handler);\n  }\n\n}\n\nServerEventManagerPlugin.ɵfac = function ServerEventManagerPlugin_Factory(t) {\n  return new (t || ServerEventManagerPlugin)(i0.ɵɵinject(DOCUMENT));\n};\n\nServerEventManagerPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ServerEventManagerPlugin,\n  factory: ServerEventManagerPlugin.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServerEventManagerPlugin, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst EMPTY_ARRAY = [];\nconst DEFAULT_SCHEMA = new DomElementSchemaRegistry();\n\nclass ServerRendererFactory2 {\n  constructor(eventManager, ngZone, document, sharedStylesHost) {\n    this.eventManager = eventManager;\n    this.ngZone = ngZone;\n    this.document = document;\n    this.sharedStylesHost = sharedStylesHost;\n    this.rendererByCompId = new Map();\n    this.schema = DEFAULT_SCHEMA;\n    this.defaultRenderer = new DefaultServerRenderer2(eventManager, document, ngZone, this.schema);\n  }\n\n  createRenderer(element, type) {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n\n    switch (type.encapsulation) {\n      case ViewEncapsulation.Emulated:\n        {\n          let renderer = this.rendererByCompId.get(type.id);\n\n          if (!renderer) {\n            renderer = new EmulatedEncapsulationServerRenderer2(this.eventManager, this.document, this.ngZone, this.sharedStylesHost, this.schema, type);\n            this.rendererByCompId.set(type.id, renderer);\n          }\n\n          renderer.applyToHost(element);\n          return renderer;\n        }\n\n      default:\n        {\n          if (!this.rendererByCompId.has(type.id)) {\n            const styles = ɵflattenStyles(type.id, type.styles, []);\n            this.sharedStylesHost.addStyles(styles);\n            this.rendererByCompId.set(type.id, this.defaultRenderer);\n          }\n\n          return this.defaultRenderer;\n        }\n    }\n  }\n\n  begin() {}\n\n  end() {}\n\n}\n\nServerRendererFactory2.ɵfac = function ServerRendererFactory2_Factory(t) {\n  return new (t || ServerRendererFactory2)(i0.ɵɵinject(i1.EventManager), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.ɵSharedStylesHost));\n};\n\nServerRendererFactory2.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ServerRendererFactory2,\n  factory: ServerRendererFactory2.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServerRendererFactory2, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.EventManager\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1.ɵSharedStylesHost\n    }];\n  }, null);\n})();\n\nclass DefaultServerRenderer2 {\n  constructor(eventManager, document, ngZone, schema) {\n    this.eventManager = eventManager;\n    this.document = document;\n    this.ngZone = ngZone;\n    this.schema = schema;\n    this.data = Object.create(null);\n    this.destroyNode = null;\n  }\n\n  destroy() {}\n\n  createElement(name, namespace, debugInfo) {\n    if (namespace) {\n      const doc = this.document || ɵgetDOM().getDefaultDocument();\n      return doc.createElementNS(ɵNAMESPACE_URIS[namespace], name);\n    }\n\n    return ɵgetDOM().createElement(name, this.document);\n  }\n\n  createComment(value, debugInfo) {\n    return ɵgetDOM().getDefaultDocument().createComment(value);\n  }\n\n  createText(value, debugInfo) {\n    const doc = ɵgetDOM().getDefaultDocument();\n    return doc.createTextNode(value);\n  }\n\n  appendChild(parent, newChild) {\n    parent.appendChild(newChild);\n  }\n\n  insertBefore(parent, newChild, refChild) {\n    if (parent) {\n      parent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent, oldChild) {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode, debugInfo) {\n    let el;\n\n    if (typeof selectorOrNode === 'string') {\n      el = this.document.querySelector(selectorOrNode);\n\n      if (!el) {\n        throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n      }\n    } else {\n      el = selectorOrNode;\n    }\n\n    while (el.firstChild) {\n      el.removeChild(el.firstChild);\n    }\n\n    return el;\n  }\n\n  parentNode(node) {\n    return node.parentNode;\n  }\n\n  nextSibling(node) {\n    return node.nextSibling;\n  }\n\n  setAttribute(el, name, value, namespace) {\n    if (namespace) {\n      el.setAttributeNS(ɵNAMESPACE_URIS[namespace], namespace + ':' + name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el, name, namespace) {\n    if (namespace) {\n      el.removeAttributeNS(ɵNAMESPACE_URIS[namespace], name);\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el, name) {\n    el.classList.add(name);\n  }\n\n  removeClass(el, name) {\n    el.classList.remove(name);\n  }\n\n  setStyle(el, style, value, flags) {\n    style = style.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n    const styleMap = _readStyleAttribute(el);\n\n    if (flags & RendererStyleFlags2.Important) {\n      value += ' !important';\n    }\n\n    styleMap[style] = value == null ? '' : value;\n\n    _writeStyleAttribute(el, styleMap);\n  }\n\n  removeStyle(el, style, flags) {\n    // IE requires '' instead of null\n    // see https://github.com/angular/angular/issues/7916\n    this.setStyle(el, style, '', flags);\n  } // The value was validated already as a property binding, against the property name.\n  // To know this value is safe to use as an attribute, the security context of the\n  // attribute with the given name is checked against that security context of the\n  // property.\n\n\n  _isSafeToReflectProperty(tagName, propertyName) {\n    return this.schema.securityContext(tagName, propertyName, true) === this.schema.securityContext(tagName, propertyName, false);\n  }\n\n  setProperty(el, name, value) {\n    checkNoSyntheticProp(name, 'property');\n\n    if (name === 'innerText') {\n      // Domino does not support innerText. Just map it to textContent.\n      el.textContent = value;\n    }\n\n    el[name] = value; // Mirror property values for known HTML element properties in the attributes.\n    // Skip `innerhtml` which is conservatively marked as an attribute for security\n    // purposes but is not actually an attribute.\n\n    const tagName = el.tagName.toLowerCase();\n\n    if (value != null && (typeof value === 'number' || typeof value == 'string') && name.toLowerCase() !== 'innerhtml' && this.schema.hasElement(tagName, EMPTY_ARRAY) && this.schema.hasProperty(tagName, name, EMPTY_ARRAY) && this._isSafeToReflectProperty(tagName, name)) {\n      this.setAttribute(el, name, value.toString());\n    }\n  }\n\n  setValue(node, value) {\n    node.textContent = value;\n  }\n\n  listen(target, eventName, callback) {\n    checkNoSyntheticProp(eventName, 'listener');\n\n    if (typeof target === 'string') {\n      return this.eventManager.addGlobalEventListener(target, eventName, this.decoratePreventDefault(callback));\n    }\n\n    return this.eventManager.addEventListener(target, eventName, this.decoratePreventDefault(callback));\n  }\n\n  decoratePreventDefault(eventHandler) {\n    return event => {\n      // Ivy uses `Function` as a special token that allows us to unwrap the function\n      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n      if (event === Function) {\n        return eventHandler;\n      } // Run the event handler inside the ngZone because event handlers are not patched\n      // by Zone on the server. This is required only for tests.\n\n\n      const allowDefaultBehavior = this.ngZone.runGuarded(() => eventHandler(event));\n\n      if (allowDefaultBehavior === false) {\n        event.preventDefault();\n        event.returnValue = false;\n      }\n\n      return undefined;\n    };\n  }\n\n}\n\nconst AT_CHARCODE = '@'.charCodeAt(0);\n\nfunction checkNoSyntheticProp(name, nameKind) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(`Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n  }\n}\n\nclass EmulatedEncapsulationServerRenderer2 extends DefaultServerRenderer2 {\n  constructor(eventManager, document, ngZone, sharedStylesHost, schema, component) {\n    super(eventManager, document, ngZone, schema);\n    this.component = component; // Add a 's' prefix to style attributes to indicate server.\n\n    const componentId = 's' + component.id;\n    const styles = ɵflattenStyles(componentId, component.styles, []);\n    sharedStylesHost.addStyles(styles);\n    this.contentAttr = ɵshimContentAttribute(componentId);\n    this.hostAttr = ɵshimHostAttribute(componentId);\n  }\n\n  applyToHost(element) {\n    super.setAttribute(element, this.hostAttr, '');\n  }\n\n  createElement(parent, name) {\n    const el = super.createElement(parent, name, this.document);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n\n}\n\nfunction _readStyleAttribute(element) {\n  const styleMap = {};\n  const styleAttribute = element.getAttribute('style');\n\n  if (styleAttribute) {\n    const styleList = styleAttribute.split(/;+/g);\n\n    for (let i = 0; i < styleList.length; i++) {\n      const style = styleList[i].trim();\n\n      if (style.length > 0) {\n        const colonIndex = style.indexOf(':');\n\n        if (colonIndex === -1) {\n          throw new Error(`Invalid CSS style: ${style}`);\n        }\n\n        const name = style.substr(0, colonIndex).trim();\n        styleMap[name] = style.substr(colonIndex + 1).trim();\n      }\n    }\n  }\n\n  return styleMap;\n}\n\nfunction _writeStyleAttribute(element, styleMap) {\n  let styleAttrValue = '';\n\n  for (const key in styleMap) {\n    const newValue = styleMap[key];\n\n    if (newValue != null) {\n      styleAttrValue += key + ':' + styleMap[key] + ';';\n    }\n  }\n\n  element.setAttribute('style', styleAttrValue);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass ServerStylesHost extends ɵSharedStylesHost {\n  constructor(doc, transitionId) {\n    super();\n    this.doc = doc;\n    this.transitionId = transitionId;\n    this.head = null;\n    this._styleNodes = new Set();\n    this.head = doc.getElementsByTagName('head')[0];\n  }\n\n  _addStyle(style) {\n    let adapter = ɵgetDOM();\n    const el = adapter.createElement('style');\n    el.textContent = style;\n\n    if (!!this.transitionId) {\n      el.setAttribute('ng-transition', this.transitionId);\n    }\n\n    this.head.appendChild(el);\n\n    this._styleNodes.add(el);\n  }\n\n  onStylesAdded(additions) {\n    additions.forEach(style => this._addStyle(style));\n  }\n\n  ngOnDestroy() {\n    this._styleNodes.forEach(styleNode => styleNode.remove());\n  }\n\n}\n\nServerStylesHost.ɵfac = function ServerStylesHost_Factory(t) {\n  return new (t || ServerStylesHost)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(ɵTRANSITION_ID, 8));\n};\n\nServerStylesHost.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ServerStylesHost,\n  factory: ServerStylesHost.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServerStylesHost, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ɵTRANSITION_ID]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction notSupported(feature) {\n  throw new Error(`platform-server does not support '${feature}'.`);\n}\n\nconst INTERNAL_SERVER_PLATFORM_PROVIDERS = [{\n  provide: DOCUMENT,\n  useFactory: _document,\n  deps: [Injector]\n}, {\n  provide: PLATFORM_ID,\n  useValue: ɵPLATFORM_SERVER_ID\n}, {\n  provide: PLATFORM_INITIALIZER,\n  useFactory: initDominoAdapter,\n  multi: true,\n  deps: [Injector]\n}, {\n  provide: PlatformLocation,\n  useClass: ServerPlatformLocation,\n  deps: [DOCUMENT, [Optional, INITIAL_CONFIG]]\n}, {\n  provide: PlatformState,\n  deps: [DOCUMENT]\n}, // Add special provider that allows multiple instances of platformServer* to be created.\n{\n  provide: ɵALLOW_MULTIPLE_PLATFORMS,\n  useValue: true\n}];\n\nfunction initDominoAdapter(injector) {\n  return () => {\n    DominoAdapter.makeCurrent();\n  };\n}\n\nfunction instantiateServerRendererFactory(renderer, engine, zone) {\n  return new ɵAnimationRendererFactory(renderer, engine, zone);\n}\n\nconst SERVER_RENDER_PROVIDERS = [ServerRendererFactory2, {\n  provide: RendererFactory2,\n  useFactory: instantiateServerRendererFactory,\n  deps: [ServerRendererFactory2, ɵAnimationEngine, NgZone]\n}, ServerStylesHost, {\n  provide: ɵSharedStylesHost,\n  useExisting: ServerStylesHost\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  multi: true,\n  useClass: ServerEventManagerPlugin\n}];\n/**\n * The ng module for the server.\n *\n * @publicApi\n */\n\nclass ServerModule {}\n\nServerModule.ɵfac = function ServerModule_Factory(t) {\n  return new (t || ServerModule)();\n};\n\nServerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ServerModule\n});\nServerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [SERVER_RENDER_PROVIDERS, SERVER_HTTP_PROVIDERS, {\n    provide: Testability,\n    useValue: null\n  }, {\n    provide: ViewportScroller,\n    useClass: ɵNullViewportScroller\n  }],\n  imports: [[HttpClientModule, NoopAnimationsModule], BrowserModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServerModule, [{\n    type: NgModule,\n    args: [{\n      exports: [BrowserModule],\n      imports: [HttpClientModule, NoopAnimationsModule],\n      providers: [SERVER_RENDER_PROVIDERS, SERVER_HTTP_PROVIDERS, {\n        provide: Testability,\n        useValue: null\n      }, {\n        provide: ViewportScroller,\n        useClass: ɵNullViewportScroller\n      }]\n    }]\n  }], null, null);\n})();\n\nfunction _document(injector) {\n  let config = injector.get(INITIAL_CONFIG, null);\n  const document = config && config.document ? parseDocument(config.document, config.url) : ɵgetDOM().createHtmlDocument(); // Tell ivy about the global document\n\n  ɵsetDocument(document);\n  return document;\n}\n/**\n * @publicApi\n */\n\n\nconst platformServer = createPlatformFactory(platformCore, 'server', INTERNAL_SERVER_PLATFORM_PROVIDERS);\n/**\n * The server platform that supports the runtime compiler.\n *\n * @publicApi\n */\n\nconst platformDynamicServer = createPlatformFactory(ɵplatformCoreDynamic, 'serverDynamic', INTERNAL_SERVER_PLATFORM_PROVIDERS);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction serializeTransferStateFactory(doc, appId, transferStore) {\n  return () => {\n    const script = doc.createElement('script');\n    script.id = appId + '-state';\n    script.setAttribute('type', 'application/json');\n    script.textContent = ɵescapeHtml(transferStore.toJson());\n    doc.body.appendChild(script);\n  };\n}\n/**\n * NgModule to install on the server side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @publicApi\n */\n\n\nclass ServerTransferStateModule {}\n\nServerTransferStateModule.ɵfac = function ServerTransferStateModule_Factory(t) {\n  return new (t || ServerTransferStateModule)();\n};\n\nServerTransferStateModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ServerTransferStateModule\n});\nServerTransferStateModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [TransferState, {\n    provide: BEFORE_APP_SERIALIZED,\n    useFactory: serializeTransferStateFactory,\n    deps: [DOCUMENT, APP_ID, TransferState],\n    multi: true\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServerTransferStateModule, [{\n    type: NgModule,\n    args: [{\n      providers: [TransferState, {\n        provide: BEFORE_APP_SERIALIZED,\n        useFactory: serializeTransferStateFactory,\n        deps: [DOCUMENT, APP_ID, TransferState],\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction _getPlatform(platformFactory, options) {\n  const extraProviders = options.extraProviders ? options.extraProviders : [];\n  return platformFactory([{\n    provide: INITIAL_CONFIG,\n    useValue: {\n      document: options.document,\n      url: options.url\n    }\n  }, extraProviders]);\n}\n\nfunction _render(platform, moduleRefPromise) {\n  return moduleRefPromise.then(moduleRef => {\n    const transitionId = moduleRef.injector.get(ɵTRANSITION_ID, null);\n\n    if (!transitionId) {\n      throw new Error(`renderModule[Factory]() requires the use of BrowserModule.withServerTransition() to ensure\nthe server-rendered app can be properly bootstrapped into a client app.`);\n    }\n\n    const applicationRef = moduleRef.injector.get(ApplicationRef);\n    return applicationRef.isStable.pipe(first(isStable => isStable)).toPromise().then(() => {\n      const platformState = platform.injector.get(PlatformState);\n      const asyncPromises = []; // Run any BEFORE_APP_SERIALIZED callbacks just before rendering to string.\n\n      const callbacks = moduleRef.injector.get(BEFORE_APP_SERIALIZED, null);\n\n      if (callbacks) {\n        for (const callback of callbacks) {\n          try {\n            const callbackResult = callback();\n\n            if (ɵisPromise(callbackResult)) {\n              // TODO: in TS3.7, callbackResult is void.\n              asyncPromises.push(callbackResult);\n            }\n          } catch (e) {\n            // Ignore exceptions.\n            console.warn('Ignoring BEFORE_APP_SERIALIZED Exception: ', e);\n          }\n        }\n      }\n\n      const complete = () => {\n        const output = platformState.renderToString();\n        platform.destroy();\n        return output;\n      };\n\n      if (asyncPromises.length === 0) {\n        return complete();\n      }\n\n      return Promise.all(asyncPromises.map(asyncPromise => {\n        return asyncPromise.catch(e => {\n          console.warn('Ignoring BEFORE_APP_SERIALIZED Exception: ', e);\n        });\n      })).then(complete);\n    });\n  });\n}\n/**\n * Renders a Module to string.\n *\n * `document` is the full document HTML of the page to render, as a string.\n * `url` is the URL for the current render request.\n * `extraProviders` are the platform level providers for the current render request.\n *\n * @publicApi\n */\n\n\nfunction renderModule(module, options) {\n  const platform = _getPlatform(platformDynamicServer, options);\n\n  return _render(platform, platform.bootstrapModule(module));\n}\n/**\n * Renders a {@link NgModuleFactory} to string.\n *\n * `document` is the full document HTML of the page to render, as a string.\n * `url` is the URL for the current render request.\n * `extraProviders` are the platform level providers for the current render request.\n *\n * @publicApi\n *\n * @deprecated\n * This symbol is no longer necessary as of Angular v13.\n * Use {@link renderModule} API instead.\n */\n\n\nfunction renderModuleFactory(moduleFactory, options) {\n  const platform = _getPlatform(platformServer, options);\n\n  return _render(platform, platform.bootstrapModuleFactory(moduleFactory));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @publicApi\n */\n\n\nconst VERSION = new Version('13.2.6');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BEFORE_APP_SERIALIZED, INITIAL_CONFIG, PlatformState, ServerModule, ServerTransferStateModule, VERSION, platformDynamicServer, platformServer, renderModule, renderModuleFactory, INTERNAL_SERVER_PLATFORM_PROVIDERS as ɵINTERNAL_SERVER_PLATFORM_PROVIDERS, SERVER_RENDER_PROVIDERS as ɵSERVER_RENDER_PROVIDERS, ServerRendererFactory2 as ɵServerRendererFactory2 }; //# sourceMappingURL=platform-server.mjs.map","map":null,"metadata":{},"sourceType":"module"}